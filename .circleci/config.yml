---
# Constant values.

node_modules_cache_key: &node_modules_cache_key node-modules-cache-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
test_fixtures_cache_key: &test_fixtures_cache_key test-fixtures-cache-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "test/fixtures/plugin-fixtures.json" }}
plugin_types_cache_key: &plugin_types_cache_key plugin-types-cache-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "src/plugins/types/index.d.ts" }}
test_env: &test_env
  GCLOUD_TRACE_NEW_CONTEXT: 1
release_tags: &release_tags
  tags:
    only: /^v\d+(\.\d+){2}(-.*)?$/

# Unit test workflow.

unit_tests: &unit_tests
  steps:
    - checkout
    - run:
        name: Configure npm to allow running scripts as root
        command: npm config set unsafe-perm true
    - restore_cache:
        key: *node_modules_cache_key
    - restore_cache:
        key: *plugin_types_cache_key
    - run:
        name: Install modules and dependencies
        command: npm install
    - save_cache:
        key: *node_modules_cache_key
        paths:
          - node_modules
    - save_cache:
        key: *plugin_types_cache_key
        paths:
          - src/plugins/types
    - run:
        name: Check code style and linting
        command: npm run check
    - run:
        name: Compile code
        command: npm run compile
    - restore_cache:
        key: *test_fixtures_cache_key
    - run:
        name: Install test fixtures
        command: npm run init-test-fixtures
    - save_cache:
        key: *test_fixtures_cache_key
        paths:
          - build/test/plugins/fixtures
    - run:
        name: Run unit tests with code coverage
        command: npm run coverage
    - run:
        name: Verify that the package installs OK
        command: npm run check-install
    - run:
        name: Run system tests (skipped for PRs)
        command: npm run system-test

# Services needed for unit tests.

mongo_service: &mongo_service
  image: mongo

redis_service: &redis_service
  image: redis

postgres_service: &postgres_service
  image: postgres
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: Password12!
    POSTGRES_DB: test

mysql_service: &mysql_service
  image: mysql:5
  environment:
    MYSQL_ROOT_PASSWORD: Password12!
    MYSQL_DATABASE: test

# Main configuration.

version: 2.0
workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *" # Daily at 6:00AM
          filters:
            branches:
              only:
                - master
    jobs:
      - node6
      - node8
      - node9
      - node10
  tests:
    jobs:
      - node6:
          filters: *release_tags
      - node8:
          filters: *release_tags
      - node9:
          filters: *release_tags
      - node10:
          filters: *release_tags
      - publish_npm:
          requires:
            - node6
            - node8
            - node9
            - node10
          filters:
            branches:
              ignore: /.*/
            <<: *release_tags

jobs:
  node6:
    docker:
      - image: node:6
        environment: *test_env
      - *mongo_service
      - *redis_service
      - *postgres_service
      - *mysql_service
    <<: *unit_tests
  node8:
    docker:
      - image: node:8
        environment: *test_env
      - *mongo_service
      - *redis_service
      - *postgres_service
      - *mysql_service
    <<: *unit_tests
  node9:
    docker:
      - image: node:9
        environment: *test_env
      - *mongo_service
      - *redis_service
      - *postgres_service
      - *mysql_service
    <<: *unit_tests
  node10:
    docker:
      - image: node:10
        environment: *test_env
      - *mongo_service
      - *redis_service
      - *postgres_service
      - *mysql_service
    <<: *unit_tests
  publish_npm:
    docker:
      - image: node:8
        user: node
    steps:
      - checkout
      - run:
          name: Set NPM authentication.
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Install modules and dependencies.
          command: npm install
      - run:
          name: Publish the module to npm.
          command: npm publish
